/****************************************************************************

  smc_fpga_idl_rtl.v FILE FOR INSTRUMENT smc_fpga

  PREPARED BY IDL VERSION 2.30e 

  DO NOT EDIT THIS FILE - YOU'LL LOSE THE ABILITY TO RERUN IDL 

  %W% %G% Copyright Teradyne, Inc.
****************************************************************************/


`include "saratoga.vh"
module smc_fpga_idl_rtl ( 

// TCIO SIGNALS NOT DEFINED IN IDL SOURCE
  I_clk100, I_PWRCLR, I_addr, 
  I_wrstb, I_wrstb_derived, I_rdstb, 
  I_w_data, O_r_data, O_address_match, 

// ENABLES ( GLEANED FROM IDL SOURCE )
  I_V48_ENABLE_ON, I_AC_ENABLE_ON, I_B_DC90_48V_Enable_ON, 
  I_K1_ENABLE_ON, 

// FIELDS (GLEANED FROM IDL SOURCE )
  O_SMC_MON_BC_FAN1_STATE_rstb, O_SMC_MON_BC_FAN0_STATE_rstb, O_SMC_MON_PDU_JAG_48V_LVL_ON_rstb, 
  O_SMC_MON_PDU_JAG_THERMAL_FAULT_rstb, O_SMC_MON_PDU_JAG_48V_GOOD_rstb, O_SMC_CNTRL_JAG_48VDC_ON_wstb, 
  O_SMC_CNTRL_JAG_48VDC_ON_rstb, O_SMC_MON_PDU_K1_rstb, O_SMC_CNTRL_JAG_SWITCHED_AC_wstb, 
  O_SMC_CNTRL_JAG_SWITCHED_AC_rstb, O_SMC_MON_BC_AC_ON_rstb, O_SMC_MON_BC_PHASE_LOSS_rstb, 
  O_SMC_MON_BC_OVR_TMP_rstb, O_SMC_MON_BC_AC_PWR_FAULT_rstb, O_SMC_MON_BC_OUTPUT_FAULT_rstb, 
  O_SMC_MON_DC90_48V_ON_rstb, O_SMC_MON_DC90_OVR_TMP_rstb, O_SMC_MON_DC90_AC_PWR_FAULT_rstb, 
  O_SMC_MON_DC90_OUTPUT_FAULT_rstb, O_B_SMC_CNTRL_BC_SWITCHED_AC_wstb, O_B_SMC_CNTRL_BC_SWITCHED_AC_rstb, 
  O_B_CNTRL_BC_48VDC_DC90_wstb, O_B_CNTRL_BC_48VDC_DC90_rstb, O_B_CNTRL_BC_48VDC_wstb, 
  O_B_CNTRL_BC_48VDC_rstb, O_BC_TACH0_LOCK_OUT_rstb, O_BC_TACH1_LOCK_OUT_rstb, 
  O_GEN_FREQ_LOCK_OUT_rstb, O_MAIN_LOCK_OUT_rstb, O_I2_LOCK_OUT_rstb, 
  O_I1_LOCK_OUT_rstb, O_V0_LOCK_OUT_rstb, O_MAINT_MON_rstb, 
  O_ID_REV_rstb, O_BC_TACH1_CTL, O_BC_TACH0_CTL, 
  O_BC_TACH1_CTR_HI_rstb, O_BC_TACH1_CTR_LO_rstb, O_BC_TACH0_CTR_HI_rstb, 
  O_BC_TACH0_CTR_LO_rstb, O_GEN_FREQ_CTR_HI_rstb, O_GEN_FREQ_CTR_MID_rstb, 
  O_GEN_FREQ_CTR_LO_rstb, O_MAIN_BLOWER_HI_rstb, O_MAIN_BLOWER_LO_rstb, 
  O_I2_HI_rstb, O_I2_LO_rstb, O_I1_HI_rstb, 
  O_I1_LO_rstb, O_V0_HI_rstb, O_V0_LO_rstb, 
  O_GEN_FREQ_CTR_MUX, O_GEN_FREQ_CTR_MUX_wstb, O_CTR_CTL, 
  O_CLR_LOCK_OUT, O_CLR_REGS, O_CLR_CTRS, 
  O_CLR_MAINT_REG, O_AUX_3_CTL, O_AUX_2_CTL, 
  O_AUX_1_CTL, O_AUX_0_CTL, O_AUX_FAN_CTL, 
  O_B_DC90_48V_Enable, O_K1_ENABLE, O_V48_ENABLE, 
  O_K1_ON_wstb, O_K1_ON_rstb, O_V48_ON_wstb, 
  O_V48_ON_rstb, 

// PORTS FOR NOALLOC CONNECTIONS
  I_smc_fpga_idl_noalloc_data_r, O_smc_fpga_idl_noalloc_data_w

  );

// PORT DECLARATIONS
  input         I_clk100;                 // System Clock 
  input         I_PWRCLR;                 // Async System Reset 
  input  [15:0] I_addr;                   // Address from external TCI 
  input         I_wrstb;                  // Write Strobe from external TCI 
  input         I_wrstb_derived;          // Write Strobe (Derived) from ext... 
  input         I_rdstb;                  // Read Strobe  from external TCI 
  input  [31:0] I_w_data;                 // Data In  from external TCI 
  output [31:0] O_r_data;                 // Data Out to external TCI 
  output        O_address_match;          // Address Match to external TCI 
  input         I_V48_ENABLE_ON;          // enable in source code 
  input         I_AC_ENABLE_ON;           // enable in source code 
  input         I_B_DC90_48V_Enable_ON;   // enable in source code 
  input         I_K1_ENABLE_ON;           // enable in source code 
  output        O_SMC_MON_BC_FAN1_STATE_rstb; //  Input the state of the mul... 
  output        O_SMC_MON_BC_FAN0_STATE_rstb; // Input the state of the mult... 
  output        O_SMC_MON_PDU_JAG_48V_LVL_ON_rstb; //  Used on Jaguar this i... 
  output        O_SMC_MON_PDU_JAG_THERMAL_FAULT_rstb; // Thermal Fault outpu... 
  output        O_SMC_MON_PDU_JAG_48V_GOOD_rstb; // BOBCAT 48V interlock OK ... 
  output        O_SMC_CNTRL_JAG_48VDC_ON_wstb; // On/off control bit for Jag... 
  output        O_SMC_CNTRL_JAG_48VDC_ON_rstb; // On/off control bit for Jag... 
  output        O_SMC_MON_PDU_K1_rstb;    // On/off control readback bit for K1 
  output        O_SMC_CNTRL_JAG_SWITCHED_AC_wstb; // On/off control bit for ... 
  output        O_SMC_CNTRL_JAG_SWITCHED_AC_rstb; // On/off control bit for ... 
  output        O_SMC_MON_BC_AC_ON_rstb;  // On/off control readback bit for K1 
  output        O_SMC_MON_BC_PHASE_LOSS_rstb; // Phase Loss signal Bobcat 48... 
  output        O_SMC_MON_BC_OVR_TMP_rstb; // Overtemperature signal Bobcat ... 
  output        O_SMC_MON_BC_AC_PWR_FAULT_rstb; // AC power fault Bobcat 48V... 
  output        O_SMC_MON_BC_OUTPUT_FAULT_rstb; // Output bad Bobcat 48V sup... 
  output        O_SMC_MON_DC90_48V_ON_rstb; // Feedback from the control sid... 
  output        O_SMC_MON_DC90_OVR_TMP_rstb; // Overtemperature signal DC90 ... 
  output        O_SMC_MON_DC90_AC_PWR_FAULT_rstb; // AC input fault DC90 sup... 
  output        O_SMC_MON_DC90_OUTPUT_FAULT_rstb; // Output bad DC90 supply ... 
  output        O_B_SMC_CNTRL_BC_SWITCHED_AC_wstb; // On/off control bit for... 
  output        O_B_SMC_CNTRL_BC_SWITCHED_AC_rstb; // On/off control bit for... 
  output        O_B_CNTRL_BC_48VDC_DC90_wstb; // On/off control bit for Bobc... 
  output        O_B_CNTRL_BC_48VDC_DC90_rstb; // On/off control bit for Bobc... 
  output        O_B_CNTRL_BC_48VDC_wstb;  // On/off control bit for Bobcat 48V 
  output        O_B_CNTRL_BC_48VDC_rstb;  // On/off control bit for Bobcat 48V 
  output        O_BC_TACH0_LOCK_OUT_rstb; // Lock out state of the GEN_FREQ ... 
  output        O_BC_TACH1_LOCK_OUT_rstb; // Lock out state of the GEN_FREQ ... 
  output        O_GEN_FREQ_LOCK_OUT_rstb; // Lock out state of the GEN_FREQ ... 
  output        O_MAIN_LOCK_OUT_rstb;     // Lock out state of the MAIN_BLOW... 
  output        O_I2_LOCK_OUT_rstb;       // Lock out state of the I2 counte... 
  output        O_I1_LOCK_OUT_rstb;       // Lock out state of the I1 counte... 
  output        O_V0_LOCK_OUT_rstb;       // Lock out state of the V0 counte... 
  output        O_MAINT_MON_rstb;         // Maintainence signal monitor rea... 
  output        O_ID_REV_rstb;            // ID and revision of FPGA 
  output        O_BC_TACH1_CTL;           //  Control bit for TACH1 counters 
  output        O_BC_TACH0_CTL;           //  Control bit for TACH0 counters 
  output        O_BC_TACH1_CTR_HI_rstb;   // Readback for upper 8 bits of Bo... 
  output        O_BC_TACH1_CTR_LO_rstb;   // Readback for upper 8 bits of Bo... 
  output        O_BC_TACH0_CTR_HI_rstb;   // Readback for upper 8 bits of Bo... 
  output        O_BC_TACH0_CTR_LO_rstb;   // Readback for upper 8 bits of Bo... 
  output        O_GEN_FREQ_CTR_HI_rstb;   // Readback for upper 8 bits of ge... 
  output        O_GEN_FREQ_CTR_MID_rstb;  // Readback for middle 8 bits of t... 
  output        O_GEN_FREQ_CTR_LO_rstb;   // Readback for upper 8 bits of th... 
  output        O_MAIN_BLOWER_HI_rstb;    // Readback for upper 8 bits of ma... 
  output        O_MAIN_BLOWER_LO_rstb;    // Readback for upper 8 bits of ma... 
  output        O_I2_HI_rstb;             // Readback for upper 8 bits of I2... 
  output        O_I2_LO_rstb;             // Readback for low 8 bits of I2 f... 
  output        O_I1_HI_rstb;             // Readback for upper 8 bits of I1... 
  output        O_I1_LO_rstb;             // Readback for low 8 bits of I1 f... 
  output        O_V0_HI_rstb;             // Readback for upper 8 bits of V0... 
  output        O_V0_LO_rstb;             // Readback for low 8 bits of V0 f... 
  output [4:0]  O_GEN_FREQ_CTR_MUX;       // General purpose frequency count... 
  output        O_GEN_FREQ_CTR_MUX_wstb;  // General purpose frequency count... 
  output        O_CTR_CTL;                // frequency counter enable 
  output        O_CLR_LOCK_OUT;           // Reset lock_out signals for all ... 
  output        O_CLR_REGS;               // Reset all frequency counter out... 
  output        O_CLR_CTRS;               // Reset all frequency counters 
  output        O_CLR_MAINT_REG;          // Reset Maint signal change register 
  output [1:0]  O_AUX_3_CTL;              // On/off control bits for Auxilia... 
  output [1:0]  O_AUX_2_CTL;              // On/off control bits for Auxilia... 
  output [1:0]  O_AUX_1_CTL;              // On/off control bits for Auxilia... 
  output [1:0]  O_AUX_0_CTL;              // On/off control bits for Auxilia... 
  output [1:0]  O_AUX_FAN_CTL;            // On/off control bits for Auxilia... 
  output        O_B_DC90_48V_Enable;      // Enable for On/off control bit f... 
  output        O_K1_ENABLE;              // Enable for On/off control bit f... 
  output        O_V48_ENABLE;             // Enable for On/off control bit f... 
  output        O_K1_ON_wstb;             // On/off control bit for K1 
  output        O_K1_ON_rstb;             // On/off control bit for K1 
  output        O_V48_ON_wstb;            // On/off control bit for 48V 
  output        O_V48_ON_rstb;            // On/off control bit for 48V 
  input  [31:0] I_smc_fpga_idl_noalloc_data_r; // noalloc read data port 
  output [31:0] O_smc_fpga_idl_noalloc_data_w; // noalloc write data port 


// PORT INPUTS ARE WIRES, OTHER PORTS ARE TRI
  wire        I_clk100;
  wire        I_PWRCLR;
  wire [15:0] I_addr;
  wire        I_wrstb;
  wire        I_wrstb_derived;
  wire        I_rdstb;
  wire [31:0] I_w_data;
  wire [31:0] O_r_data;
  wire        O_address_match;
  wire        I_V48_ENABLE_ON;
  wire        I_AC_ENABLE_ON;
  wire        I_B_DC90_48V_Enable_ON;
  wire        I_K1_ENABLE_ON;

// DECLARATIONS FOR FIELD ENABLES, STROBES...
  wire SMC_MON_BC_FAN1_STATE_renb;
  wire SMC_MON_BC_FAN1_STATE_rstb;
  wire SMC_MON_BC_FAN0_STATE_renb;
  wire SMC_MON_BC_FAN0_STATE_rstb;
  wire SMC_MON_PDU_JAG_48V_LVL_ON_renb;
  wire SMC_MON_PDU_JAG_48V_LVL_ON_rstb;
  wire SMC_MON_PDU_JAG_THERMAL_FAULT_renb;
  wire SMC_MON_PDU_JAG_THERMAL_FAULT_rstb;
  wire SMC_MON_PDU_JAG_48V_GOOD_renb;
  wire SMC_MON_PDU_JAG_48V_GOOD_rstb;
  wire SMC_CNTRL_JAG_48VDC_ON_wenb;
  wire SMC_CNTRL_JAG_48VDC_ON_wstb;
  wire SMC_CNTRL_JAG_48VDC_ON_renb;
  wire SMC_CNTRL_JAG_48VDC_ON_rstb;
  wire SMC_MON_PDU_K1_renb;
  wire SMC_MON_PDU_K1_rstb;
  wire SMC_CNTRL_JAG_SWITCHED_AC_wenb;
  wire SMC_CNTRL_JAG_SWITCHED_AC_wstb;
  wire SMC_CNTRL_JAG_SWITCHED_AC_renb;
  wire SMC_CNTRL_JAG_SWITCHED_AC_rstb;
  wire SMC_MON_BC_AC_ON_renb;
  wire SMC_MON_BC_AC_ON_rstb;
  wire SMC_MON_BC_PHASE_LOSS_renb;
  wire SMC_MON_BC_PHASE_LOSS_rstb;
  wire SMC_MON_BC_OVR_TMP_renb;
  wire SMC_MON_BC_OVR_TMP_rstb;
  wire SMC_MON_BC_AC_PWR_FAULT_renb;
  wire SMC_MON_BC_AC_PWR_FAULT_rstb;
  wire SMC_MON_BC_OUTPUT_FAULT_renb;
  wire SMC_MON_BC_OUTPUT_FAULT_rstb;
  wire SMC_MON_DC90_48V_ON_renb;
  wire SMC_MON_DC90_48V_ON_rstb;
  wire SMC_MON_DC90_OVR_TMP_renb;
  wire SMC_MON_DC90_OVR_TMP_rstb;
  wire SMC_MON_DC90_AC_PWR_FAULT_renb;
  wire SMC_MON_DC90_AC_PWR_FAULT_rstb;
  wire SMC_MON_DC90_OUTPUT_FAULT_renb;
  wire SMC_MON_DC90_OUTPUT_FAULT_rstb;
  wire B_SMC_CNTRL_BC_SWITCHED_AC_wenb;
  wire B_SMC_CNTRL_BC_SWITCHED_AC_wstb;
  wire B_SMC_CNTRL_BC_SWITCHED_AC_renb;
  wire B_SMC_CNTRL_BC_SWITCHED_AC_rstb;
  wire B_CNTRL_BC_48VDC_DC90_wenb;
  wire B_CNTRL_BC_48VDC_DC90_wstb;
  wire B_CNTRL_BC_48VDC_DC90_renb;
  wire B_CNTRL_BC_48VDC_DC90_rstb;
  wire B_CNTRL_BC_48VDC_wenb;
  wire B_CNTRL_BC_48VDC_wstb;
  wire B_CNTRL_BC_48VDC_renb;
  wire B_CNTRL_BC_48VDC_rstb;
  wire BC_TACH0_LOCK_OUT_renb;
  wire BC_TACH0_LOCK_OUT_rstb;
  wire BC_TACH1_LOCK_OUT_renb;
  wire BC_TACH1_LOCK_OUT_rstb;
  wire GEN_FREQ_LOCK_OUT_renb;
  wire GEN_FREQ_LOCK_OUT_rstb;
  wire MAIN_LOCK_OUT_renb;
  wire MAIN_LOCK_OUT_rstb;
  wire I2_LOCK_OUT_renb;
  wire I2_LOCK_OUT_rstb;
  wire I1_LOCK_OUT_renb;
  wire I1_LOCK_OUT_rstb;
  wire V0_LOCK_OUT_renb;
  wire V0_LOCK_OUT_rstb;
  wire MAINT_MON_renb;
  wire MAINT_MON_rstb;
  wire ID_REV_renb;
  wire ID_REV_rstb;
  wire BC_TACH1_CTL_wenb;
  wire BC_TACH1_CTL_wstb;
  wire BC_TACH0_CTL_wenb;
  wire BC_TACH0_CTL_wstb;
  wire BC_TACH1_CTR_HI_renb;
  wire BC_TACH1_CTR_HI_rstb;
  wire BC_TACH1_CTR_LO_renb;
  wire BC_TACH1_CTR_LO_rstb;
  wire BC_TACH0_CTR_HI_renb;
  wire BC_TACH0_CTR_HI_rstb;
  wire BC_TACH0_CTR_LO_renb;
  wire BC_TACH0_CTR_LO_rstb;
  wire GEN_FREQ_CTR_HI_renb;
  wire GEN_FREQ_CTR_HI_rstb;
  wire GEN_FREQ_CTR_MID_renb;
  wire GEN_FREQ_CTR_MID_rstb;
  wire GEN_FREQ_CTR_LO_renb;
  wire GEN_FREQ_CTR_LO_rstb;
  wire MAIN_BLOWER_HI_renb;
  wire MAIN_BLOWER_HI_rstb;
  wire MAIN_BLOWER_LO_renb;
  wire MAIN_BLOWER_LO_rstb;
  wire I2_HI_renb;
  wire I2_HI_rstb;
  wire I2_LO_renb;
  wire I2_LO_rstb;
  wire I1_HI_renb;
  wire I1_HI_rstb;
  wire I1_LO_renb;
  wire I1_LO_rstb;
  wire V0_HI_renb;
  wire V0_HI_rstb;
  wire V0_LO_renb;
  wire V0_LO_rstb;
  wire GEN_FREQ_CTR_MUX_wenb;
  wire GEN_FREQ_CTR_MUX_wstb;
  wire GEN_FREQ_CTR_MUX_renb;
  wire GEN_FREQ_CTR_MUX_rstb;
  wire CTR_CTL_wenb;
  wire CTR_CTL_wstb;
  wire CTR_CTL_renb;
  wire CTR_CTL_rstb;
  wire CLR_LOCK_OUT_wenb;
  wire CLR_LOCK_OUT_wstb;
  wire CLR_LOCK_OUT_renb;
  wire CLR_LOCK_OUT_rstb;
  wire CLR_REGS_wenb;
  wire CLR_REGS_wstb;
  wire CLR_REGS_renb;
  wire CLR_REGS_rstb;
  wire CLR_CTRS_wenb;
  wire CLR_CTRS_wstb;
  wire CLR_CTRS_renb;
  wire CLR_CTRS_rstb;
  wire CLR_MAINT_REG_wenb;
  wire CLR_MAINT_REG_wstb;
  wire CLR_MAINT_REG_renb;
  wire CLR_MAINT_REG_rstb;
  wire AUX_3_CTL_wenb;
  wire AUX_3_CTL_wstb;
  wire AUX_3_CTL_renb;
  wire AUX_3_CTL_rstb;
  wire AUX_2_CTL_wenb;
  wire AUX_2_CTL_wstb;
  wire AUX_2_CTL_renb;
  wire AUX_2_CTL_rstb;
  wire AUX_1_CTL_wenb;
  wire AUX_1_CTL_wstb;
  wire AUX_1_CTL_renb;
  wire AUX_1_CTL_rstb;
  wire AUX_0_CTL_wenb;
  wire AUX_0_CTL_wstb;
  wire AUX_0_CTL_renb;
  wire AUX_0_CTL_rstb;
  wire AUX_FAN_CTL_wenb;
  wire AUX_FAN_CTL_wstb;
  wire AUX_FAN_CTL_renb;
  wire AUX_FAN_CTL_rstb;
  wire B_DC90_48V_Enable_wenb;
  wire B_DC90_48V_Enable_wstb;
  wire B_DC90_48V_Enable_renb;
  wire B_DC90_48V_Enable_rstb;
  wire K1_ENABLE_wenb;
  wire K1_ENABLE_wstb;
  wire K1_ENABLE_renb;
  wire K1_ENABLE_rstb;
  wire V48_ENABLE_wenb;
  wire V48_ENABLE_wstb;
  wire V48_ENABLE_renb;
  wire V48_ENABLE_rstb;
  wire K1_ON_wenb;
  wire K1_ON_wstb;
  wire K1_ON_renb;
  wire K1_ON_rstb;
  wire V48_ON_wenb;
  wire V48_ON_wstb;
  wire V48_ON_renb;
  wire V48_ON_rstb;


// DECLARATIONS FOR FDEFs...
  wire O_SMC_MON_BC_FAN1_STATE_rstb = SMC_MON_BC_FAN1_STATE_rstb;
  wire O_SMC_MON_BC_FAN0_STATE_rstb = SMC_MON_BC_FAN0_STATE_rstb;
  wire O_SMC_MON_PDU_JAG_48V_LVL_ON_rstb = SMC_MON_PDU_JAG_48V_LVL_ON_rstb;
  wire O_SMC_MON_PDU_JAG_THERMAL_FAULT_rstb = SMC_MON_PDU_JAG_THERMAL_FAULT_rstb;
  wire O_SMC_MON_PDU_JAG_48V_GOOD_rstb = SMC_MON_PDU_JAG_48V_GOOD_rstb;
  wire O_SMC_CNTRL_JAG_48VDC_ON_wstb = SMC_CNTRL_JAG_48VDC_ON_wstb;
  wire O_SMC_CNTRL_JAG_48VDC_ON_rstb = SMC_CNTRL_JAG_48VDC_ON_rstb;
  wire O_SMC_MON_PDU_K1_rstb = SMC_MON_PDU_K1_rstb;
  wire O_SMC_CNTRL_JAG_SWITCHED_AC_wstb = SMC_CNTRL_JAG_SWITCHED_AC_wstb;
  wire O_SMC_CNTRL_JAG_SWITCHED_AC_rstb = SMC_CNTRL_JAG_SWITCHED_AC_rstb;
  wire O_SMC_MON_BC_AC_ON_rstb = SMC_MON_BC_AC_ON_rstb;
  wire O_SMC_MON_BC_PHASE_LOSS_rstb = SMC_MON_BC_PHASE_LOSS_rstb;
  wire O_SMC_MON_BC_OVR_TMP_rstb = SMC_MON_BC_OVR_TMP_rstb;
  wire O_SMC_MON_BC_AC_PWR_FAULT_rstb = SMC_MON_BC_AC_PWR_FAULT_rstb;
  wire O_SMC_MON_BC_OUTPUT_FAULT_rstb = SMC_MON_BC_OUTPUT_FAULT_rstb;
  wire O_SMC_MON_DC90_48V_ON_rstb = SMC_MON_DC90_48V_ON_rstb;
  wire O_SMC_MON_DC90_OVR_TMP_rstb = SMC_MON_DC90_OVR_TMP_rstb;
  wire O_SMC_MON_DC90_AC_PWR_FAULT_rstb = SMC_MON_DC90_AC_PWR_FAULT_rstb;
  wire O_SMC_MON_DC90_OUTPUT_FAULT_rstb = SMC_MON_DC90_OUTPUT_FAULT_rstb;
  wire O_B_SMC_CNTRL_BC_SWITCHED_AC_wstb = B_SMC_CNTRL_BC_SWITCHED_AC_wstb;
  wire O_B_SMC_CNTRL_BC_SWITCHED_AC_rstb = B_SMC_CNTRL_BC_SWITCHED_AC_rstb;
  wire O_B_CNTRL_BC_48VDC_DC90_wstb = B_CNTRL_BC_48VDC_DC90_wstb;
  wire O_B_CNTRL_BC_48VDC_DC90_rstb = B_CNTRL_BC_48VDC_DC90_rstb;
  wire O_B_CNTRL_BC_48VDC_wstb = B_CNTRL_BC_48VDC_wstb;
  wire O_B_CNTRL_BC_48VDC_rstb = B_CNTRL_BC_48VDC_rstb;
  wire O_BC_TACH0_LOCK_OUT_rstb = BC_TACH0_LOCK_OUT_rstb;
  wire O_BC_TACH1_LOCK_OUT_rstb = BC_TACH1_LOCK_OUT_rstb;
  wire O_GEN_FREQ_LOCK_OUT_rstb = GEN_FREQ_LOCK_OUT_rstb;
  wire O_MAIN_LOCK_OUT_rstb = MAIN_LOCK_OUT_rstb;
  wire O_I2_LOCK_OUT_rstb = I2_LOCK_OUT_rstb;
  wire O_I1_LOCK_OUT_rstb = I1_LOCK_OUT_rstb;
  wire O_V0_LOCK_OUT_rstb = V0_LOCK_OUT_rstb;
  wire O_MAINT_MON_rstb = MAINT_MON_rstb;
  wire O_ID_REV_rstb = ID_REV_rstb;
  reg  BC_TACH1_CTL;
  wire  O_BC_TACH1_CTL = BC_TACH1_CTL ;
  reg  BC_TACH0_CTL;
  wire  O_BC_TACH0_CTL = BC_TACH0_CTL ;
  wire O_BC_TACH1_CTR_HI_rstb = BC_TACH1_CTR_HI_rstb;
  wire O_BC_TACH1_CTR_LO_rstb = BC_TACH1_CTR_LO_rstb;
  wire O_BC_TACH0_CTR_HI_rstb = BC_TACH0_CTR_HI_rstb;
  wire O_BC_TACH0_CTR_LO_rstb = BC_TACH0_CTR_LO_rstb;
  wire O_GEN_FREQ_CTR_HI_rstb = GEN_FREQ_CTR_HI_rstb;
  wire O_GEN_FREQ_CTR_MID_rstb = GEN_FREQ_CTR_MID_rstb;
  wire O_GEN_FREQ_CTR_LO_rstb = GEN_FREQ_CTR_LO_rstb;
  wire O_MAIN_BLOWER_HI_rstb = MAIN_BLOWER_HI_rstb;
  wire O_MAIN_BLOWER_LO_rstb = MAIN_BLOWER_LO_rstb;
  wire O_I2_HI_rstb = I2_HI_rstb;
  wire O_I2_LO_rstb = I2_LO_rstb;
  wire O_I1_HI_rstb = I1_HI_rstb;
  wire O_I1_LO_rstb = I1_LO_rstb;
  wire O_V0_HI_rstb = V0_HI_rstb;
  wire O_V0_LO_rstb = V0_LO_rstb;
  reg [4:0] GEN_FREQ_CTR_MUX;
  wire [4:0] O_GEN_FREQ_CTR_MUX = GEN_FREQ_CTR_MUX;
  wire O_GEN_FREQ_CTR_MUX_wstb = GEN_FREQ_CTR_MUX_wstb;
  reg  CTR_CTL;
  wire  O_CTR_CTL = CTR_CTL;
  reg  CLR_LOCK_OUT;
  wire  O_CLR_LOCK_OUT = CLR_LOCK_OUT;
  reg  CLR_REGS;
  wire  O_CLR_REGS = CLR_REGS;
  reg  CLR_CTRS;
  wire  O_CLR_CTRS = CLR_CTRS;
  reg  CLR_MAINT_REG;
  wire  O_CLR_MAINT_REG = CLR_MAINT_REG;
  reg [1:0] AUX_3_CTL;
  wire [1:0] O_AUX_3_CTL = AUX_3_CTL;
  reg [1:0] AUX_2_CTL;
  wire [1:0] O_AUX_2_CTL = AUX_2_CTL;
  reg [1:0] AUX_1_CTL;
  wire [1:0] O_AUX_1_CTL = AUX_1_CTL;
  reg [1:0] AUX_0_CTL;
  wire [1:0] O_AUX_0_CTL = AUX_0_CTL;
  reg [1:0] AUX_FAN_CTL;
  wire [1:0] O_AUX_FAN_CTL = AUX_FAN_CTL;
  reg  B_DC90_48V_Enable;
  wire  O_B_DC90_48V_Enable = B_DC90_48V_Enable;
  reg  K1_ENABLE;
  wire  O_K1_ENABLE = K1_ENABLE;
  reg  V48_ENABLE;
  wire  O_V48_ENABLE = V48_ENABLE;
  wire O_K1_ON_wstb = K1_ON_wstb;
  wire O_K1_ON_rstb = K1_ON_rstb;
  wire O_V48_ON_wstb = V48_ON_wstb;
  wire O_V48_ON_rstb = V48_ON_rstb;


// DECLARATIONS FOR REGISTERED ENABLES...
   reg V48_ENABLE_ON;
   reg AC_ENABLE_ON;
   reg B_DC90_48V_Enable_ON;
   reg K1_ENABLE_ON;

// CONNECTIONS TO EXTERNAL TCI
  wire [15:0] addr = I_addr [15:0];
  wire wrstb = I_wrstb;
  wire wrstb_derived = I_wrstb_derived;
  wire rdstb = I_rdstb;
  wire [31:0] w_data = I_w_data [31:0];
  wire [31:0] r_data;
  assign O_r_data [31:0] = r_data [31:0];
  wire address_match;
  assign O_address_match = address_match;

// DECLARATIONS FOR NOALLOC PORTS
  wire [31:0] I_smc_fpga_idl_noalloc_data_r;
  wire [31:0] O_smc_fpga_idl_noalloc_data_w = w_data;
// TCIO INSTANTIATION SUPPRESSED


// REGISTERED ENABLES...
   always @ ( posedge I_clk100 )
       begin
           V48_ENABLE_ON <= `RDD I_V48_ENABLE_ON;
           AC_ENABLE_ON <= `RDD I_AC_ENABLE_ON;
           B_DC90_48V_Enable_ON <= `RDD I_B_DC90_48V_Enable_ON;
           K1_ENABLE_ON <= `RDD I_K1_ENABLE_ON;
       end

// DECODED ADDRESSES
   wire en_45840 = ( addr == 45840 ) ;
   wire en_45868 = ( addr == 45868 ) ;
   wire en_45834 = ( addr == 45834 ) ;
   wire en_45841 = ( addr == 45841 ) ;
   wire en_45830 = ( addr == 45830 ) ;
   wire en_45827 = ( addr == 45827 ) ;
   wire en_45826 = ( addr == 45826 ) ;
   wire en_45866 = ( addr == 45866 ) ;
   wire en_45867 = ( addr == 45867 ) ;
   wire en_45870 = ( addr == 45870 ) ;
   wire en_45829 = ( addr == 45829 ) ;
   wire en_45828 = ( addr == 45828 ) ;
   wire en_45825 = ( addr == 45825 ) ;
   wire en_45612 = ( addr == 45612 ) ;
   wire en_45611 = ( addr == 45611 ) ;
   wire en_45610 = ( addr == 45610 ) ;
   wire en_45617 = ( addr == 45617 ) ;
   wire en_45616 = ( addr == 45616 ) ;
   wire en_45615 = ( addr == 45615 ) ;
   wire en_45614 = ( addr == 45614 ) ;
   wire en_45613 = ( addr == 45613 ) ;
   wire en_45609 = ( addr == 45609 ) ;
   wire en_45606 = ( addr == 45606 ) ;
   wire en_45608 = ( addr == 45608 ) ;
   wire en_45599 = ( addr == 45599 ) ;
   wire en_45598 = ( addr == 45598 ) ;
   wire en_45587 = ( addr == 45587 ) ;
   wire en_45586 = ( addr == 45586 ) ;
   wire en_45585 = ( addr == 45585 ) ;
   wire en_45584 = ( addr == 45584 ) ;
   wire en_45579 = ( addr == 45579 ) ;
   wire en_45578 = ( addr == 45578 ) ;
   wire en_45607 = ( addr == 45607 ) ;
   wire en_45577 = ( addr == 45577 ) ;
   wire en_45576 = ( addr == 45576 ) ;
   wire en_45575 = ( addr == 45575 ) ;
   wire en_45574 = ( addr == 45574 ) ;
   wire en_45573 = ( addr == 45573 ) ;
   wire en_45572 = ( addr == 45572 ) ;
   wire en_45571 = ( addr == 45571 ) ;
   wire en_45836 = ( addr == 45836 ) ;
   wire en_45581 = ( addr == 45581 ) ;
   wire en_45580 = ( addr == 45580 ) ;
   wire en_45570 = ( addr == 45570 ) ;
   wire en_45569 = ( addr == 45569 ) ;

// DECODED ENABLES AND STROBES -WRITE

assign

  SMC_CNTRL_JAG_48VDC_ON_wstb = SMC_CNTRL_JAG_48VDC_ON_wenb & wrstb_derived;
assign
  SMC_CNTRL_JAG_48VDC_ON_wenb = (     en_45830
                                  &  ( V48_ENABLE_ON == 1'h1 ) );
assign
  SMC_CNTRL_JAG_SWITCHED_AC_wstb = SMC_CNTRL_JAG_SWITCHED_AC_wenb & wrstb_derived;
assign
  SMC_CNTRL_JAG_SWITCHED_AC_wenb = (     en_45826
                                     &  ( AC_ENABLE_ON == 1'h1 ) );
assign
  B_SMC_CNTRL_BC_SWITCHED_AC_wstb = B_SMC_CNTRL_BC_SWITCHED_AC_wenb & wrstb_derived;
assign
  B_SMC_CNTRL_BC_SWITCHED_AC_wenb = (     en_45829
                                      &  ( AC_ENABLE_ON == 1'h1 ) );
assign
  B_CNTRL_BC_48VDC_DC90_wstb = B_CNTRL_BC_48VDC_DC90_wenb & wrstb_derived;
assign
  B_CNTRL_BC_48VDC_DC90_wenb = (     en_45828
                                 &  ( B_DC90_48V_Enable_ON == 1'h1 ) );
assign
  B_CNTRL_BC_48VDC_wstb = B_CNTRL_BC_48VDC_wenb & wrstb_derived;
assign
  B_CNTRL_BC_48VDC_wenb = (     en_45825
                            &  ( V48_ENABLE_ON == 1'h1 ) );
assign
  BC_TACH1_CTL_wstb = BC_TACH1_CTL_wenb & wrstb_derived;
assign
  BC_TACH1_CTL_wenb = (     en_45617 );
assign
  BC_TACH0_CTL_wstb = BC_TACH0_CTL_wenb & wrstb_derived;
assign
  BC_TACH0_CTL_wenb = (     en_45617 );
assign
  GEN_FREQ_CTR_MUX_wstb = GEN_FREQ_CTR_MUX_wenb & wrstb_derived;
assign
  GEN_FREQ_CTR_MUX_wenb = (     en_45607 );
assign
  CTR_CTL_wstb = CTR_CTL_wenb & wrstb_derived;
assign
  CTR_CTL_wenb = (     en_45577 );
assign
  CLR_LOCK_OUT_wstb = CLR_LOCK_OUT_wenb & wrstb_derived;
assign
  CLR_LOCK_OUT_wenb = (     en_45576 );
assign
  CLR_REGS_wstb = CLR_REGS_wenb & wrstb_derived;
assign
  CLR_REGS_wenb = (     en_45576 );
assign
  CLR_CTRS_wstb = CLR_CTRS_wenb & wrstb_derived;
assign
  CLR_CTRS_wenb = (     en_45576 );
assign
  CLR_MAINT_REG_wstb = CLR_MAINT_REG_wenb & wrstb_derived;
assign
  CLR_MAINT_REG_wenb = (     en_45576 );
assign
  AUX_3_CTL_wstb = AUX_3_CTL_wenb & wrstb_derived;
assign
  AUX_3_CTL_wenb = (     en_45575 );
assign
  AUX_2_CTL_wstb = AUX_2_CTL_wenb & wrstb_derived;
assign
  AUX_2_CTL_wenb = (     en_45574 );
assign
  AUX_1_CTL_wstb = AUX_1_CTL_wenb & wrstb_derived;
assign
  AUX_1_CTL_wenb = (     en_45573 );
assign
  AUX_0_CTL_wstb = AUX_0_CTL_wenb & wrstb_derived;
assign
  AUX_0_CTL_wenb = (     en_45572 );
assign
  AUX_FAN_CTL_wstb = AUX_FAN_CTL_wenb & wrstb_derived;
assign
  AUX_FAN_CTL_wenb = (     en_45571 );
assign
  B_DC90_48V_Enable_wstb = B_DC90_48V_Enable_wenb & wrstb_derived;
assign
  B_DC90_48V_Enable_wenb = (     en_45836 );
assign
  K1_ENABLE_wstb = K1_ENABLE_wenb & wrstb_derived;
assign
  K1_ENABLE_wenb = (     en_45581 );
assign
  V48_ENABLE_wstb = V48_ENABLE_wenb & wrstb_derived;
assign
  V48_ENABLE_wenb = (     en_45580 );
assign
  K1_ON_wstb = K1_ON_wenb & wrstb_derived;
assign
  K1_ON_wenb = (     en_45570
                 &  ( K1_ENABLE_ON == 1'h1 ) );
assign
  V48_ON_wstb = V48_ON_wenb & wrstb_derived;
assign
  V48_ON_wenb = (     en_45569
                  &  ( V48_ENABLE_ON == 1'h1 ) );

// WRITES OF ALLOCATED WRITABLE FIELDS 

// GEN_FREQ_CTR_MUX: Derived Clock
// synopsys async_set_reset "I_PWRCLR"
   always @ ( GEN_FREQ_CTR_MUX_wstb or w_data
           or  I_PWRCLR )
    begin
      if ( I_PWRCLR == 1'b1 )
          GEN_FREQ_CTR_MUX = 5'h0;
      else  if ( GEN_FREQ_CTR_MUX_wstb ) 
          begin
            GEN_FREQ_CTR_MUX[4:0] = w_data[4:0];
          end
    end

/******************************************/
//      START MULTICYCLE VERIFICATION       
// synopsys translate_off                   
   always @ ( GEN_FREQ_CTR_MUX_wstb )
     begin
       if( GEN_FREQ_CTR_MUX_wstb )
          force O_GEN_FREQ_CTR_MUX = 5'hx;
       else
          release O_GEN_FREQ_CTR_MUX;
     end
// synopsys translate_on                    
//      END MULTICYCLE VERIFICATION         
/******************************************/

// CTR_CTL: Derived Clock
// synopsys async_set_reset "I_PWRCLR"
   always @ ( CTR_CTL_wstb or w_data
           or  I_PWRCLR )
    begin
      if ( I_PWRCLR == 1'b1 )
          CTR_CTL = 1'h0;
      else  if ( CTR_CTL_wstb ) 
          begin
            CTR_CTL = w_data[0];
          end
    end

/******************************************/
//      START MULTICYCLE VERIFICATION       
// synopsys translate_off                   
   always @ ( CTR_CTL_wstb )
     begin
       if( CTR_CTL_wstb )
          force O_CTR_CTL = 1'hx;
       else
          release O_CTR_CTL;
     end
// synopsys translate_on                    
//      END MULTICYCLE VERIFICATION         
/******************************************/

// CLR_LOCK_OUT: Derived Clock
// synopsys async_set_reset "I_PWRCLR"
   always @ ( CLR_LOCK_OUT_wstb or w_data
           or  I_PWRCLR )
    begin
      if ( I_PWRCLR == 1'b1 )
          CLR_LOCK_OUT = 1'h0;
      else  if ( CLR_LOCK_OUT_wstb ) 
          begin
            CLR_LOCK_OUT = w_data[3];
          end
    end

/******************************************/
//      START MULTICYCLE VERIFICATION       
// synopsys translate_off                   
   always @ ( CLR_LOCK_OUT_wstb )
     begin
       if( CLR_LOCK_OUT_wstb )
          force O_CLR_LOCK_OUT = 1'hx;
       else
          release O_CLR_LOCK_OUT;
     end
// synopsys translate_on                    
//      END MULTICYCLE VERIFICATION         
/******************************************/

// CLR_REGS: Derived Clock
// synopsys async_set_reset "I_PWRCLR"
   always @ ( CLR_REGS_wstb or w_data
           or  I_PWRCLR )
    begin
      if ( I_PWRCLR == 1'b1 )
          CLR_REGS = 1'h0;
      else  if ( CLR_REGS_wstb ) 
          begin
            CLR_REGS = w_data[1];
          end
    end

/******************************************/
//      START MULTICYCLE VERIFICATION       
// synopsys translate_off                   
   always @ ( CLR_REGS_wstb )
     begin
       if( CLR_REGS_wstb )
          force O_CLR_REGS = 1'hx;
       else
          release O_CLR_REGS;
     end
// synopsys translate_on                    
//      END MULTICYCLE VERIFICATION         
/******************************************/

// CLR_CTRS: Derived Clock
// synopsys async_set_reset "I_PWRCLR"
   always @ ( CLR_CTRS_wstb or w_data
           or  I_PWRCLR )
    begin
      if ( I_PWRCLR == 1'b1 )
          CLR_CTRS = 1'h0;
      else  if ( CLR_CTRS_wstb ) 
          begin
            CLR_CTRS = w_data[0];
          end
    end

/******************************************/
//      START MULTICYCLE VERIFICATION       
// synopsys translate_off                   
   always @ ( CLR_CTRS_wstb )
     begin
       if( CLR_CTRS_wstb )
          force O_CLR_CTRS = 1'hx;
       else
          release O_CLR_CTRS;
     end
// synopsys translate_on                    
//      END MULTICYCLE VERIFICATION         
/******************************************/

// CLR_MAINT_REG: Derived Clock
// synopsys async_set_reset "I_PWRCLR"
   always @ ( CLR_MAINT_REG_wstb or w_data
           or  I_PWRCLR )
    begin
      if ( I_PWRCLR == 1'b1 )
          CLR_MAINT_REG = 1'h0;
      else  if ( CLR_MAINT_REG_wstb ) 
          begin
            CLR_MAINT_REG = w_data[2];
          end
    end

/******************************************/
//      START MULTICYCLE VERIFICATION       
// synopsys translate_off                   
   always @ ( CLR_MAINT_REG_wstb )
     begin
       if( CLR_MAINT_REG_wstb )
          force O_CLR_MAINT_REG = 1'hx;
       else
          release O_CLR_MAINT_REG;
     end
// synopsys translate_on                    
//      END MULTICYCLE VERIFICATION         
/******************************************/

// AUX_3_CTL: Derived Clock
// synopsys async_set_reset "I_PWRCLR"
   always @ ( AUX_3_CTL_wstb or w_data
           or  I_PWRCLR )
    begin
      if ( I_PWRCLR == 1'b1 )
          AUX_3_CTL = 2'h0;
      else  if ( AUX_3_CTL_wstb ) 
          begin
            AUX_3_CTL[1:0] = w_data[1:0];
          end
    end

/******************************************/
//      START MULTICYCLE VERIFICATION       
// synopsys translate_off                   
   always @ ( AUX_3_CTL_wstb )
     begin
       if( AUX_3_CTL_wstb )
          force O_AUX_3_CTL = 2'hx;
       else
          release O_AUX_3_CTL;
     end
// synopsys translate_on                    
//      END MULTICYCLE VERIFICATION         
/******************************************/

// AUX_2_CTL: Derived Clock
// synopsys async_set_reset "I_PWRCLR"
   always @ ( AUX_2_CTL_wstb or w_data
           or  I_PWRCLR )
    begin
      if ( I_PWRCLR == 1'b1 )
          AUX_2_CTL = 2'h0;
      else  if ( AUX_2_CTL_wstb ) 
          begin
            AUX_2_CTL[1:0] = w_data[1:0];
          end
    end

/******************************************/
//      START MULTICYCLE VERIFICATION       
// synopsys translate_off                   
   always @ ( AUX_2_CTL_wstb )
     begin
       if( AUX_2_CTL_wstb )
          force O_AUX_2_CTL = 2'hx;
       else
          release O_AUX_2_CTL;
     end
// synopsys translate_on                    
//      END MULTICYCLE VERIFICATION         
/******************************************/

// AUX_1_CTL: Derived Clock
// synopsys async_set_reset "I_PWRCLR"
   always @ ( AUX_1_CTL_wstb or w_data
           or  I_PWRCLR )
    begin
      if ( I_PWRCLR == 1'b1 )
          AUX_1_CTL = 2'h0;
      else  if ( AUX_1_CTL_wstb ) 
          begin
            AUX_1_CTL[1:0] = w_data[1:0];
          end
    end

/******************************************/
//      START MULTICYCLE VERIFICATION       
// synopsys translate_off                   
   always @ ( AUX_1_CTL_wstb )
     begin
       if( AUX_1_CTL_wstb )
          force O_AUX_1_CTL = 2'hx;
       else
          release O_AUX_1_CTL;
     end
// synopsys translate_on                    
//      END MULTICYCLE VERIFICATION         
/******************************************/

// AUX_0_CTL: Derived Clock
// synopsys async_set_reset "I_PWRCLR"
   always @ ( AUX_0_CTL_wstb or w_data
           or  I_PWRCLR )
    begin
      if ( I_PWRCLR == 1'b1 )
          AUX_0_CTL = 2'h0;
      else  if ( AUX_0_CTL_wstb ) 
          begin
            AUX_0_CTL[1:0] = w_data[1:0];
          end
    end

/******************************************/
//      START MULTICYCLE VERIFICATION       
// synopsys translate_off                   
   always @ ( AUX_0_CTL_wstb )
     begin
       if( AUX_0_CTL_wstb )
          force O_AUX_0_CTL = 2'hx;
       else
          release O_AUX_0_CTL;
     end
// synopsys translate_on                    
//      END MULTICYCLE VERIFICATION         
/******************************************/

// AUX_FAN_CTL: Derived Clock
// synopsys async_set_reset "I_PWRCLR"
   always @ ( AUX_FAN_CTL_wstb or w_data
           or  I_PWRCLR )
    begin
      if ( I_PWRCLR == 1'b1 )
          AUX_FAN_CTL = 2'h0;
      else  if ( AUX_FAN_CTL_wstb ) 
          begin
            AUX_FAN_CTL[1:0] = w_data[1:0];
          end
    end

/******************************************/
//      START MULTICYCLE VERIFICATION       
// synopsys translate_off                   
   always @ ( AUX_FAN_CTL_wstb )
     begin
       if( AUX_FAN_CTL_wstb )
          force O_AUX_FAN_CTL = 2'hx;
       else
          release O_AUX_FAN_CTL;
     end
// synopsys translate_on                    
//      END MULTICYCLE VERIFICATION         
/******************************************/

// B_DC90_48V_Enable: Derived Clock
// synopsys async_set_reset "I_PWRCLR"
   always @ ( B_DC90_48V_Enable_wstb or w_data
           or  I_PWRCLR )
    begin
      if ( I_PWRCLR == 1'b1 )
          B_DC90_48V_Enable = 1'h0;
      else  if ( B_DC90_48V_Enable_wstb ) 
          begin
            B_DC90_48V_Enable = w_data[0];
          end
    end

/******************************************/
//      START MULTICYCLE VERIFICATION       
// synopsys translate_off                   
   always @ ( B_DC90_48V_Enable_wstb )
     begin
       if( B_DC90_48V_Enable_wstb )
          force O_B_DC90_48V_Enable = 1'hx;
       else
          release O_B_DC90_48V_Enable;
     end
// synopsys translate_on                    
//      END MULTICYCLE VERIFICATION         
/******************************************/

// K1_ENABLE: Derived Clock
// synopsys async_set_reset "I_PWRCLR"
   always @ ( K1_ENABLE_wstb or w_data
           or  I_PWRCLR )
    begin
      if ( I_PWRCLR == 1'b1 )
          K1_ENABLE = 1'h0;
      else  if ( K1_ENABLE_wstb ) 
          begin
            K1_ENABLE = w_data[0];
          end
    end

/******************************************/
//      START MULTICYCLE VERIFICATION       
// synopsys translate_off                   
   always @ ( K1_ENABLE_wstb )
     begin
       if( K1_ENABLE_wstb )
          force O_K1_ENABLE = 1'hx;
       else
          release O_K1_ENABLE;
     end
// synopsys translate_on                    
//      END MULTICYCLE VERIFICATION         
/******************************************/

// V48_ENABLE: Derived Clock
// synopsys async_set_reset "I_PWRCLR"
   always @ ( V48_ENABLE_wstb or w_data
           or  I_PWRCLR )
    begin
      if ( I_PWRCLR == 1'b1 )
          V48_ENABLE = 1'h0;
      else  if ( V48_ENABLE_wstb ) 
          begin
            V48_ENABLE = w_data[0];
          end
    end

/******************************************/
//      START MULTICYCLE VERIFICATION       
// synopsys translate_off                   
   always @ ( V48_ENABLE_wstb )
     begin
       if( V48_ENABLE_wstb )
          force O_V48_ENABLE = 1'hx;
       else
          release O_V48_ENABLE;
     end
// synopsys translate_on                    
//      END MULTICYCLE VERIFICATION         
/******************************************/

// ALLOCATED PULSE FIELDS 
   always @(posedge I_clk100 )
     begin
        BC_TACH1_CTL <= `RDD w_data[1] & BC_TACH1_CTL_wstb;
     end
   always @(posedge I_clk100 )
     begin
        BC_TACH0_CTL <= `RDD w_data[0] & BC_TACH0_CTL_wstb;
     end

// DECODED ENABLES AND STROBES -READ

assign

  SMC_MON_BC_FAN1_STATE_rstb = SMC_MON_BC_FAN1_STATE_renb & rdstb;
assign
  SMC_MON_BC_FAN1_STATE_renb = (     en_45840 );
assign
  SMC_MON_BC_FAN0_STATE_rstb = SMC_MON_BC_FAN0_STATE_renb & rdstb;
assign
  SMC_MON_BC_FAN0_STATE_renb = (     en_45840 );
assign
  SMC_MON_PDU_JAG_48V_LVL_ON_rstb = SMC_MON_PDU_JAG_48V_LVL_ON_renb & rdstb;
assign
  SMC_MON_PDU_JAG_48V_LVL_ON_renb = (     en_45868 );
assign
  SMC_MON_PDU_JAG_THERMAL_FAULT_rstb = SMC_MON_PDU_JAG_THERMAL_FAULT_renb & rdstb;
assign
  SMC_MON_PDU_JAG_THERMAL_FAULT_renb = (     en_45834 );
assign
  SMC_MON_PDU_JAG_48V_GOOD_rstb = SMC_MON_PDU_JAG_48V_GOOD_renb & rdstb;
assign
  SMC_MON_PDU_JAG_48V_GOOD_renb = (     en_45841 );
assign
  SMC_CNTRL_JAG_48VDC_ON_rstb = SMC_CNTRL_JAG_48VDC_ON_renb & rdstb;
assign
  SMC_CNTRL_JAG_48VDC_ON_renb = (     en_45830 );
assign
  SMC_MON_PDU_K1_rstb = SMC_MON_PDU_K1_renb & rdstb;
assign
  SMC_MON_PDU_K1_renb = (     en_45827 );
assign
  SMC_CNTRL_JAG_SWITCHED_AC_rstb = SMC_CNTRL_JAG_SWITCHED_AC_renb & rdstb;
assign
  SMC_CNTRL_JAG_SWITCHED_AC_renb = (     en_45826 );
assign
  SMC_MON_BC_AC_ON_rstb = SMC_MON_BC_AC_ON_renb & rdstb;
assign
  SMC_MON_BC_AC_ON_renb = (     en_45866 );
assign
  SMC_MON_BC_PHASE_LOSS_rstb = SMC_MON_BC_PHASE_LOSS_renb & rdstb;
assign
  SMC_MON_BC_PHASE_LOSS_renb = (     en_45867 );
assign
  SMC_MON_BC_OVR_TMP_rstb = SMC_MON_BC_OVR_TMP_renb & rdstb;
assign
  SMC_MON_BC_OVR_TMP_renb = (     en_45867 );
assign
  SMC_MON_BC_AC_PWR_FAULT_rstb = SMC_MON_BC_AC_PWR_FAULT_renb & rdstb;
assign
  SMC_MON_BC_AC_PWR_FAULT_renb = (     en_45867 );
assign
  SMC_MON_BC_OUTPUT_FAULT_rstb = SMC_MON_BC_OUTPUT_FAULT_renb & rdstb;
assign
  SMC_MON_BC_OUTPUT_FAULT_renb = (     en_45867 );
assign
  SMC_MON_DC90_48V_ON_rstb = SMC_MON_DC90_48V_ON_renb & rdstb;
assign
  SMC_MON_DC90_48V_ON_renb = (     en_45870 );
assign
  SMC_MON_DC90_OVR_TMP_rstb = SMC_MON_DC90_OVR_TMP_renb & rdstb;
assign
  SMC_MON_DC90_OVR_TMP_renb = (     en_45870 );
assign
  SMC_MON_DC90_AC_PWR_FAULT_rstb = SMC_MON_DC90_AC_PWR_FAULT_renb & rdstb;
assign
  SMC_MON_DC90_AC_PWR_FAULT_renb = (     en_45870 );
assign
  SMC_MON_DC90_OUTPUT_FAULT_rstb = SMC_MON_DC90_OUTPUT_FAULT_renb & rdstb;
assign
  SMC_MON_DC90_OUTPUT_FAULT_renb = (     en_45870 );
assign
  B_SMC_CNTRL_BC_SWITCHED_AC_rstb = B_SMC_CNTRL_BC_SWITCHED_AC_renb & rdstb;
assign
  B_SMC_CNTRL_BC_SWITCHED_AC_renb = (     en_45829 );
assign
  B_CNTRL_BC_48VDC_DC90_rstb = B_CNTRL_BC_48VDC_DC90_renb & rdstb;
assign
  B_CNTRL_BC_48VDC_DC90_renb = (     en_45828 );
assign
  B_CNTRL_BC_48VDC_rstb = B_CNTRL_BC_48VDC_renb & rdstb;
assign
  B_CNTRL_BC_48VDC_renb = (     en_45825 );
assign
  BC_TACH0_LOCK_OUT_rstb = BC_TACH0_LOCK_OUT_renb & rdstb;
assign
  BC_TACH0_LOCK_OUT_renb = (     en_45612 );
assign
  BC_TACH1_LOCK_OUT_rstb = BC_TACH1_LOCK_OUT_renb & rdstb;
assign
  BC_TACH1_LOCK_OUT_renb = (     en_45612 );
assign
  GEN_FREQ_LOCK_OUT_rstb = GEN_FREQ_LOCK_OUT_renb & rdstb;
assign
  GEN_FREQ_LOCK_OUT_renb = (     en_45612 );
assign
  MAIN_LOCK_OUT_rstb = MAIN_LOCK_OUT_renb & rdstb;
assign
  MAIN_LOCK_OUT_renb = (     en_45612 );
assign
  I2_LOCK_OUT_rstb = I2_LOCK_OUT_renb & rdstb;
assign
  I2_LOCK_OUT_renb = (     en_45612 );
assign
  I1_LOCK_OUT_rstb = I1_LOCK_OUT_renb & rdstb;
assign
  I1_LOCK_OUT_renb = (     en_45612 );
assign
  V0_LOCK_OUT_rstb = V0_LOCK_OUT_renb & rdstb;
assign
  V0_LOCK_OUT_renb = (     en_45612 );
assign
  MAINT_MON_rstb = MAINT_MON_renb & rdstb;
assign
  MAINT_MON_renb = (     en_45611 );
assign
  ID_REV_rstb = ID_REV_renb & rdstb;
assign
  ID_REV_renb = (     en_45610 );
assign
  BC_TACH1_CTR_HI_rstb = BC_TACH1_CTR_HI_renb & rdstb;
assign
  BC_TACH1_CTR_HI_renb = (     en_45616 );
assign
  BC_TACH1_CTR_LO_rstb = BC_TACH1_CTR_LO_renb & rdstb;
assign
  BC_TACH1_CTR_LO_renb = (     en_45615 );
assign
  BC_TACH0_CTR_HI_rstb = BC_TACH0_CTR_HI_renb & rdstb;
assign
  BC_TACH0_CTR_HI_renb = (     en_45614 );
assign
  BC_TACH0_CTR_LO_rstb = BC_TACH0_CTR_LO_renb & rdstb;
assign
  BC_TACH0_CTR_LO_renb = (     en_45613 );
assign
  GEN_FREQ_CTR_HI_rstb = GEN_FREQ_CTR_HI_renb & rdstb;
assign
  GEN_FREQ_CTR_HI_renb = (     en_45609 );
assign
  GEN_FREQ_CTR_MID_rstb = GEN_FREQ_CTR_MID_renb & rdstb;
assign
  GEN_FREQ_CTR_MID_renb = (     en_45606 );
assign
  GEN_FREQ_CTR_LO_rstb = GEN_FREQ_CTR_LO_renb & rdstb;
assign
  GEN_FREQ_CTR_LO_renb = (     en_45608 );
assign
  MAIN_BLOWER_HI_rstb = MAIN_BLOWER_HI_renb & rdstb;
assign
  MAIN_BLOWER_HI_renb = (     en_45599 );
assign
  MAIN_BLOWER_LO_rstb = MAIN_BLOWER_LO_renb & rdstb;
assign
  MAIN_BLOWER_LO_renb = (     en_45598 );
assign
  I2_HI_rstb = I2_HI_renb & rdstb;
assign
  I2_HI_renb = (     en_45587 );
assign
  I2_LO_rstb = I2_LO_renb & rdstb;
assign
  I2_LO_renb = (     en_45586 );
assign
  I1_HI_rstb = I1_HI_renb & rdstb;
assign
  I1_HI_renb = (     en_45585 );
assign
  I1_LO_rstb = I1_LO_renb & rdstb;
assign
  I1_LO_renb = (     en_45584 );
assign
  V0_HI_rstb = V0_HI_renb & rdstb;
assign
  V0_HI_renb = (     en_45579 );
assign
  V0_LO_rstb = V0_LO_renb & rdstb;
assign
  V0_LO_renb = (     en_45578 );
assign
  GEN_FREQ_CTR_MUX_rstb = GEN_FREQ_CTR_MUX_renb & rdstb;
assign
  GEN_FREQ_CTR_MUX_renb = (     en_45607 );
assign
  CTR_CTL_rstb = CTR_CTL_renb & rdstb;
assign
  CTR_CTL_renb = (     en_45577 );
assign
  CLR_LOCK_OUT_rstb = CLR_LOCK_OUT_renb & rdstb;
assign
  CLR_LOCK_OUT_renb = (     en_45576 );
assign
  CLR_REGS_rstb = CLR_REGS_renb & rdstb;
assign
  CLR_REGS_renb = (     en_45576 );
assign
  CLR_CTRS_rstb = CLR_CTRS_renb & rdstb;
assign
  CLR_CTRS_renb = (     en_45576 );
assign
  CLR_MAINT_REG_rstb = CLR_MAINT_REG_renb & rdstb;
assign
  CLR_MAINT_REG_renb = (     en_45576 );
assign
  AUX_3_CTL_rstb = AUX_3_CTL_renb & rdstb;
assign
  AUX_3_CTL_renb = (     en_45575 );
assign
  AUX_2_CTL_rstb = AUX_2_CTL_renb & rdstb;
assign
  AUX_2_CTL_renb = (     en_45574 );
assign
  AUX_1_CTL_rstb = AUX_1_CTL_renb & rdstb;
assign
  AUX_1_CTL_renb = (     en_45573 );
assign
  AUX_0_CTL_rstb = AUX_0_CTL_renb & rdstb;
assign
  AUX_0_CTL_renb = (     en_45572 );
assign
  AUX_FAN_CTL_rstb = AUX_FAN_CTL_renb & rdstb;
assign
  AUX_FAN_CTL_renb = (     en_45571 );
assign
  B_DC90_48V_Enable_rstb = B_DC90_48V_Enable_renb & rdstb;
assign
  B_DC90_48V_Enable_renb = (     en_45836 );
assign
  K1_ENABLE_rstb = K1_ENABLE_renb & rdstb;
assign
  K1_ENABLE_renb = (     en_45581 );
assign
  V48_ENABLE_rstb = V48_ENABLE_renb & rdstb;
assign
  V48_ENABLE_renb = (     en_45580 );
assign
  K1_ON_rstb = K1_ON_renb & rdstb;
assign
  K1_ON_renb = (     en_45570 );
assign
  V48_ON_rstb = V48_ON_renb & rdstb;
assign
  V48_ON_renb = (     en_45569 );

assign
  address_match = SMC_MON_BC_FAN1_STATE_renb
               || SMC_MON_BC_FAN0_STATE_renb
               || SMC_MON_PDU_JAG_48V_LVL_ON_renb
               || SMC_MON_PDU_JAG_THERMAL_FAULT_renb
               || SMC_MON_PDU_JAG_48V_GOOD_renb
               || SMC_CNTRL_JAG_48VDC_ON_renb
               || SMC_MON_PDU_K1_renb
               || SMC_CNTRL_JAG_SWITCHED_AC_renb
               || SMC_MON_BC_AC_ON_renb
               || SMC_MON_BC_PHASE_LOSS_renb
               || SMC_MON_BC_OVR_TMP_renb
               || SMC_MON_BC_AC_PWR_FAULT_renb
               || SMC_MON_BC_OUTPUT_FAULT_renb
               || SMC_MON_DC90_48V_ON_renb
               || SMC_MON_DC90_OVR_TMP_renb
               || SMC_MON_DC90_AC_PWR_FAULT_renb
               || SMC_MON_DC90_OUTPUT_FAULT_renb
               || B_SMC_CNTRL_BC_SWITCHED_AC_renb
               || B_CNTRL_BC_48VDC_DC90_renb
               || B_CNTRL_BC_48VDC_renb
               || BC_TACH0_LOCK_OUT_renb
               || BC_TACH1_LOCK_OUT_renb
               || GEN_FREQ_LOCK_OUT_renb
               || MAIN_LOCK_OUT_renb
               || I2_LOCK_OUT_renb
               || I1_LOCK_OUT_renb
               || V0_LOCK_OUT_renb
               || MAINT_MON_renb
               || ID_REV_renb
               || BC_TACH1_CTR_HI_renb
               || BC_TACH1_CTR_LO_renb
               || BC_TACH0_CTR_HI_renb
               || BC_TACH0_CTR_LO_renb
               || GEN_FREQ_CTR_HI_renb
               || GEN_FREQ_CTR_MID_renb
               || GEN_FREQ_CTR_LO_renb
               || MAIN_BLOWER_HI_renb
               || MAIN_BLOWER_LO_renb
               || I2_HI_renb
               || I2_LO_renb
               || I1_HI_renb
               || I1_LO_renb
               || V0_HI_renb
               || V0_LO_renb
               || GEN_FREQ_CTR_MUX_renb
               || CTR_CTL_renb
               || CLR_LOCK_OUT_renb
               || CLR_REGS_renb
               || CLR_CTRS_renb
               || CLR_MAINT_REG_renb
               || AUX_3_CTL_renb
               || AUX_2_CTL_renb
               || AUX_1_CTL_renb
               || AUX_0_CTL_renb
               || AUX_FAN_CTL_renb
               || B_DC90_48V_Enable_renb
               || K1_ENABLE_renb
               || V48_ENABLE_renb
               || K1_ON_renb
               || V48_ON_renb;

// READS OF ALLOCATED READABLE FIELDS
assign
  r_data[31:0] =  I_smc_fpga_idl_noalloc_data_r[31:0]

               | ( { 32{ GEN_FREQ_CTR_MUX_rstb } } & (
                    { 27'b0,O_GEN_FREQ_CTR_MUX[4:0] } )  )

               | ( { 32{ CTR_CTL_rstb } } & (
                    { 31'b0, O_CTR_CTL } )  )

               | ( { 32{ CLR_LOCK_OUT_rstb } } & (
                    { 28'b0, O_CLR_LOCK_OUT,3'b0 } )  )

               | ( { 32{ CLR_REGS_rstb } } & (
                    { 30'b0, O_CLR_REGS,1'b0 } )  )

               | ( { 32{ CLR_CTRS_rstb } } & (
                    { 31'b0, O_CLR_CTRS } )  )

               | ( { 32{ CLR_MAINT_REG_rstb } } & (
                    { 29'b0, O_CLR_MAINT_REG,2'b0 } )  )

               | ( { 32{ AUX_3_CTL_rstb } } & (
                    { 30'b0,O_AUX_3_CTL[1:0] } )  )

               | ( { 32{ AUX_2_CTL_rstb } } & (
                    { 30'b0,O_AUX_2_CTL[1:0] } )  )

               | ( { 32{ AUX_1_CTL_rstb } } & (
                    { 30'b0,O_AUX_1_CTL[1:0] } )  )

               | ( { 32{ AUX_0_CTL_rstb } } & (
                    { 30'b0,O_AUX_0_CTL[1:0] } )  )

               | ( { 32{ AUX_FAN_CTL_rstb } } & (
                    { 30'b0,O_AUX_FAN_CTL[1:0] } )  )

               | ( { 32{ B_DC90_48V_Enable_rstb } } & (
                    { 31'b0, O_B_DC90_48V_Enable } )  )

               | ( { 32{ K1_ENABLE_rstb } } & (
                    { 31'b0, O_K1_ENABLE } )  )

               | ( { 32{ V48_ENABLE_rstb } } & (
                    { 31'b0, O_V48_ENABLE } )  )  ;
endmodule
